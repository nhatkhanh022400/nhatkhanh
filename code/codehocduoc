
*Ngày 3 đi thực tập : Cài đặt docker và mysql trên docker


// Cài docker
-link huong dan: https://www.youtube.com/watch?v=r6JiWwh-08c&t=487s

#code :
-apt update : update các gói dữ liệu
-apt install apt-transport-https ca-certificates curl software-properties-common
-curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
-add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
-apt update
-apt-cache policy docker-ce
-apt install docker-ce
-systemctl status docker
-service docker status
-service docker start
-service docker status
 
// Cài pull image có mysql
-docker pull mysql/mysql-server:5.7
-docker run --name=mysqlCon -p 3306:3306 -d mysql/mysql-server:5.7
-docker logs mysqlCon
-docker exec -it mysqlCon mysql -uroot -p
-ALTER USER 'root'@'localhost' IDENTIFIED BY 'nhatkhanh123';
-link huong dan : https://medium.com/@dilsimchandrasena/how-to-deploy-and-use-a-mysql-docker-container-in-ubuntu-4ace7c893982



*Ngày 4 đi thực tập : Import database vào mysql


#Chạy mysql
-docker start: chay docker
-docker ps: coi trong docker co nhung gi
-docker ps -a: coi tat ca nhung file da cai vao docker
-docker exec -it mysqlCon bash
-docker exec -it mysqlCon mysql -uroot -p

#Import database lên mysql
-cd /mnt/c/Users/P
-PC/     Public/
-docker cp /mnt/c/Users/PC/Downloads/crm-local-min.sql mysqlCon:/home: copy crm-local-min.sql đến mysqlCon:/home
-docker exec -it mysqlCon bash: mở server mysql
-mysql -uroot -p crm < /home/crm-local-min.sql: lấy crm-local-min trong home bỏ qua database crm
-docker exec -it mysqlCon mysql -uroot -p: vào thẳng mysql
-mysql -uroot -p: đăng nhập mysql 



code:
root@KhanhLapTop:~# docker cp C:\Users\PC\Downloads\crm-local-min.sql mysqlCon:/home
copying between containers is not supported
root@KhanhLapTop:~# cd /mnt/c/Users/P
PC/     Public/
root@KhanhLapTop:~# docker cp /mnt/c/Users/PC/Downloads/crm-local-min.sql mysqlCon:/home
root@KhanhLapTop:~# docker exec -it mysqlCon mysql -uroot -p
Enter password:
ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)
root@KhanhLapTop:~# docker exec -it mysqlCon bash
bash-4.2# mysql -uroot -p crm < /home/crm-local-min.sql
Enter password:
bash-4.2# show crm;
bash: show: command not found
bash-4.2# mysql -uroot -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 76
Server version: 5.7.32 MySQL Community Server (GPL)

Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.



------------------Tuần 2 thực tập-------------------


*******Ngày 5 đi thực tập: Học về dockerfile********


*Bước 1: Thiết lập 
-Xác định các phụ thuộc ứng dụng.

-Tạo một thư mục cho dự án bằng lệnh :
    $ mkdir composetest
    $ cd composetest
-Tạo một tệp được gọi app.py trong thư mục dự án của bạn và dán tệp này vào: 
    $ touch app.py
-Sau đó cho dữ liệu vào app.py bằng lệnh:
    $ vim app.py
-Những dữ liệu thêm vào app.py
      import time

      import redis
      from flask import Flask

      app = Flask(__name__)
      cache = redis.Redis(host='redis', port=6379)

      def get_hit_count():
          retries = 5
          while True:
              try:
                  return cache.incr('hits')
              except redis.exceptions.ConnectionError as exc:
                  if retries == 0:
                     raise exc
                  retries -= 1
                  time.sleep(0.5)

      @app.route('/')
      def hello():
          count = get_hit_count()
          return 'Hello World! I have been seen {} times.\n'.format(count)   
-Tạo một tệp khác được gọi requirements.txt trong thư mục composetest và dán tệp này vào:  
      flask
      redis 


*Bước 2: Tạo Dockerfile

-Tạo thêm 1 tệp tên Dockerfile trong thư mục composetest:
  
  Trong tệp Dockerfile ta thêm dữ liệu:
    FROM python:3.7-alpine
    WORKDIR /code
    ENV FLASK_APP=app.py
    ENV FLASK_RUN_HOST=0.0.0.0
    RUN apk add --no-cache gcc musl-dev linux-headers
    COPY requirements.txt requirements.txt
    RUN pip install -r requirements.txt
    EXPOSE 5000
    COPY . .
    CMD ["flask", "run"]
  
  Các lệnh trên có nghĩa là
    Xây dựng hình ảnh bắt đầu bằng hình ảnh Python 3.7.
    Đặt thư mục làm việc thành /code.
    Đặt các biến môi trường được sử dụng bởi flasklệnh.
    Cài đặt gcc và các phụ thuộc khác
    Sao chép requirements.txtvà cài đặt các phụ thuộc Python.
    Thêm siêu dữ liệu vào hình ảnh để mô tả rằng vùng chứa đang lắng nghe trên cổng 5000
    Sao chép thư mục hiện tại .trong dự án vào workdir .trong hình ảnh.
    Đặt lệnh mặc định cho vùng chứa thành flask run.


*Bước 3: Xác định các dịch vụ trong tệp Soạn

-Tạo một tệp được gọi docker-compose.yml trong thư mục composetest và dán như sau:
    version: "3.4"
    services:
      web:
        build: .
        ports:
          - "5000:5000"
      redis:
        image: "redis:alpine"

    Các lệnh trên có nghĩa:
     version 3.4 Là ta chọn docker-compose phiên bản 3.4
     build . Là ta xây dựng trên docker-compose
     ports:
          - "5000:5000" : Là các webdịch vụ sử dụng một hình ảnh được xây dựng từ Dockerfiletrong thư mục hiện hành. Sau đó, nó liên kết vùng chứa và máy chủ với cổng tiếp xúc 5000
     image: "redis:alpine" Là các redis dịch vụ sử dụng một công Redis hình ảnh kéo từ registry Docker Hub.


*Bước 4: Xây dựng và chạy ứng dụng đã Soạn 

-Từ thư mục composetest, khởi động ứng dụng bằng cách chạy các lệnh 
     $docker-compose build
     $docker-compose up
-Sau đó lên trên 1 trình duyệt web gõ localhost:5000 nếu nó chạy ra    Hello World! I have been seen 1 times. thì ta thành công  
-Ngoài ra ta còn có thể gõ lệnh $docker image ls để kiểm tra các image đã cài trong docker


********Ngày 6 thực tập: Học về Docker symfony*********



-Tạo 1 thư mục tên symfony-docker
-Bên trong thư mục symfony-docker tạo thêm 3 thư mục build, mysql, symfony và tệp docker-compose.yml
 
 *Định cấu hình vùng chứa chi nginx:
 -Mở tệp docker-compose.yml sau đó mở tệp bằng lệnh vim docker-compose.yml và thêm vào trong tệp dữ liệu:
          version: '3'

          services:
            nginx:
                build:
                        context: .
                        dockerfile: Dockerfile-nginx
                volumes:
                        - ./symfony/:/var/www/symfony/
                ports:
                        - 8001:80
                networks:
                        - symfony
            networks:
          symfony:
  -dockerfile cho biết tệp cấu hình sẽ được sử dụng để tạo vùng chứa và chúng tôi sẽ tạo tiếp theo.
  -volumes sẽ thiết lập rằng thư mục cục bộ của chúng ta được gọi symfonysẽ được liên kết với /var/www/symfonythư mục của vùng chứa.
  -ports thực hiện ánh xạ giữa cổng 80 của vùng chứa và cổng 8001 mà chúng tôi sẽ sử dụng để truy cập thông qua trình duyệt.
  -Và cuối cùng là networksthiết lập một mạng lưới cho toàn bộ dự án để tất cả các container có thể giao tiếp với nhau.

-Tiếp theo,tạo tệp Dockerfile-nginx trong thư mục symfony-docker và thêm dữ liệu vào :
          FROM nginx:latest
          RUN rm -rf /etc/nginx/conf.d/default.conf
          COPY ./build/nginx/default.conf /etc/nginx/conf.d

          CMD [ "/bin/bash", "-c", "nginx -g 'daemon off;'" ]
        -Trong dòng 1 , xác định hình ảnh Nginx mà ta muốn sử dụng bằng cách sử dụng chỉ thị FROM.
        -Trong dòng 2, sử dụng COPY phương pháp để sao chép nội dung của default.conf tệp dự án (nơi cấu hình máy chủ mặc định mà Nginx sẽ sử dụng) nằm trong /etc/nginx/conf.dthư mục của vùng chứa.

-Trong thư mục build tạo thêm thư mục nginx, trong thư mục nginx tạo 1 tệp tên default.conf và cho dữ liệu vào:
        server {
        listen 80;
        root /var/www/symfony/public;

        location / {
            try_files $uri /index.php$is_args$args;
        }

         location ~ ^/index\.php(/|$) {
            fastcgi_pass php:9000;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT $realpath_root;
            internal;
        }
        location ~ \.php$ {
            return 404;
        }
            error_log /dev/stdout info;
            access_log /var/log/nginx/project_access.log;
        }

-Chạy lệnh docker-compose up --build để set up Dockerfile-Nginx


*Định cấu hình vùng chứa cho PHP
- Mở tệp docker-compose.yml và thêm dữ liệu vào:
    version: '3'

    services:
        nginx:
                build:
                        context: .
                        dockerfile: Dockerfile-nginx
                volumes:
                        - ./symfony/:/var/www/symfony/
                ports:
                        - 8001:80
                networks:
                        - symfony
        php:
                build:
                        context: .
                        dockerfile: Dockerfile-php
                environment:
                        APP_ENV: dev
                        DATABASE_URL: mysql://root:root@mysql:3306/symfony_db?serverVersion=5.7
                volumes:
                        - ./symfony/:/var/www/symfony/
                networks:
                        - symfony
                depends_on:
                        - mysql
    
    networks:  
        symfony:

        -Bên trong, environmentchúng ta có thể khai báo các biến môi trường mà chúng ta muốn dự án Symfony của mình đọc và tải sau này.
        -networks cũng được tạo thành từ một phần tử duy nhất: symfonycho phép vùng chứa này và vùng chứa của Nginx giao tiếp.
        -Cuối cùng, volumescó cùng giá trị với vùng chứa Nginx, để symfonythư mục của dự án của chúng ta được liên kết với /var/www/symfonythư mục của vùng chứa.

-Tạo 1 tệp ở thư mục symfony-docker và thêm dữ liệu vào:
        FROM php:fpm-stretch

        RUN apt-get update && apt-get install -y

        RUN apt-get update && apt-get install -y --no-install-recommends \
              git \
              zlib1g-dev \
              libxml2-dev \
              libzip-dev \
        && docker-php-ext-install \
              zip \
              intl \
              mysqli \
              pdo pdo_mysql

        RUN curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer
        COPY symfony/ /var/www/symfony
        WORKDIR /var/www/symfony/
- Chạy lệnh docker-compose up --build để set up Dockerfile-php


*Định cấu hình vùng chứa cho MySQL:

- Mở tệp docker-compose.yml và thêm dữ liệu:
    version: '3'

    services:
        nginx:
                build:
                        context: .
                        dockerfile: Dockerfile-nginx
                volumes:
                        - ./symfony/:/var/www/symfony/
                ports:
                        - 8001:80
                networks:
                        - symfony
        php:
                build:
                        context: .
                        dockerfile: Dockerfile-php
                environment:
                        APP_ENV: dev
                        DATABASE_URL: mysql://root:root@mysql:3306/symfony_db?serverVersion=5.7
                        empose:
                                - "8001"
                volumes:
                        - ./symfony/:/var/www/symfony/
                networks:
                        - symfony
                depends_on:
                        - mysql
        mysql:
                 image: mysql
                 command: ['--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci', '--default-authentication-plugin=mysql_native_password']
                 environment:
                        MYSQL_DATABASE: symfony_db
                        MYSQL_USER: root
                        MYSQL_PASSWORD: nhatkhanh123
                        MYSQL_ROOT_PASSWORD: root
                 ports:
                        - 3066:3066
                 volumes:
                        - ./mysql:/var/lib/mysql
                 networks:
                        - symfony
    networks:
        symfony:

- Chạy lệnh docker-compose up --build để set up Dockerfile-mysql  




************Ngày 7 đi thực tập: Cài symfony**************

- Khởi chạy docker symfony php bằng lệnh docker exec -it  symfony-docker_php_1 bash
- Cài các source của symfony trong php container
        curl -sS https://get.symfony.com/cli/installer | bash
        mv /root/.symfony/bin/symfony /usr/local/bin/symfony
        symfony new symfony --dir=/var/www/symfony

- Sau khi cài xong chạy lệnh docker-compose up để chạy mysql, php, Nginx
- Check thử chạy thành công chưa bằng cách lên trình duyệt web gõ localhost:8001
- Để  thêm DATABASE_URLbiến môi trường vào cấu hình vùng chứa PHP ta vào php container và gõ lệnh bin/console doctrine:database:create  
        

                              
                            




